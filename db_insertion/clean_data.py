# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15gZhu-KcCiZiqHGtuxlJGdylR9Vh-LIJ
"""

import pandas as pd
from functools import reduce
import json
from pprint import pprint
from pydantic import BaseModel
from enum import Enum
from datetime import date
from prisma import Prisma, enums, types
import asyncio


category = enums.Category.__m

types.__doc__

async def main() -> None:
    db = Prisma()
    await db.connect()
    




#class JSONEncoder(json.JSONEncoder):
#    def default(self, obj):
#        if isinstance(obj, Enum):
#            return obj.value
#    if isinstance(obj, date):
#        return obj.isoformat()
#    return super().default(obj)
#
#class category(Enum):
#    Revenue = "revenue"
#    Expense = "expense"
#class revenue(Enum):
#    Oil = "oil"
#    Other = "other_revenues"
#    PreviousYears = "previous_years"
#class expense(Enum):
#    Salaries = "salaries"
#    Operational = "operational"
#    Development = "development"
#    Support = "support"
#
#class oil(Enum):
#    Sales = "oil_sales"
#    Taxes = "oil_taxes"
#class other_revenues(Enum):
#    Taxes = "taxes"
#  Other = "other"
#  Telecommunications = "telecommunications"
#  LibyanCentralBank = "libyan_central_bank"
#  Fuel = "fuel"
#  Customs = "customs"
#class salaries(Enum):
#    Legislature = 'legislature'
#  Sovereign = 'sovereign'
#  Defense = 'defense'
#  Service = 'service'
#  Local = 'local'
#  Productive = 'productive'

with pd.ExcelFile("report-23.xlsx") as f:
    dfs = f.parse(["Revenue", "Expense", "Detailed_Revenues", "Salaries"], index_col=0)

#class Category(BaseModel):
#    type: category
#  name: str
#  value: int
#  date:  date
#
#class Revenue(BaseModel):
#    type: revenue
#  name: str
#  value: int
#  date: date
#
#class Expense(BaseModel):
#    type: expense
#  name: str
#  value: int
#  date: date
#
#class Oil(BaseModel):
#    type: oil
#  name: str
#  value: int
#  date: date
#
#class OtherRevenues(BaseModel):
#    type: other_revenues
#  name: str
#  value: int
#  date: date

RevenueFrame, ExpenseFrame, DetailedRevFrame  = list(map(lambda df: df.groupby("ID").sum().reset_index() , dfs.values()))

RevenueFrame = RevenueFrame.rename(columns=dict(zip(RevenueFrame.columns, ["date", "value"])))
ExpenseFrame = ExpenseFrame.rename(columns=dict(zip(ExpenseFrame.columns, ["date", "value"])))

RevenueFrame.loc[:, ["type", "name"]] = [category.Revenue, "الإيرادات"]
ExpenseFrame.loc[:, ["type", "name"]] = [category.Expense, "النفقات"]

RevenueFrame.date = RevenueFrame.date.apply(lambda x: date(2023, x, 1))
ExpenseFrame.date = ExpenseFrame.date.apply(lambda x: date(2023, x, 1))

RevenueFrame.value -= RevenueFrame.value.shift(1).fillna(0)
ExpenseFrame.value -= ExpenseFrame.value.shift(1).fillna(0)

CategoryFrame = pd.concat([RevenueFrame, ExpenseFrame])

revenues = dfs["Revenue"].reset_index()
revenues = revenues.rename(columns=dict(zip(revenues.columns, ["type", "name", "value", "date"])))
revenues.type = revenues.type.apply(lambda x: list(revenue.__members__.values())[x-1])
revenues.date = revenues.date.apply(lambda x: date(2023, x, 1))
revenues.parent_type = category.Revenue
revenues = revenues.sort_values('date').reset_index(drop=True)
revenues.value -= revenues.groupby('name').value.shift(1).fillna(0)

expenses = dfs["Expense"].reset_index()
expenses = expenses.rename(columns=dict(zip(expenses.columns, ["type", "name", "value", "date"])))
expenses.type = expenses.type.apply(lambda x: list(expense.__members__.values())[x-1])
expenses.date = expenses.date.apply(lambda x: date(2023, x, 1))
expenses.parent_type = category.Expense
expenses = expenses.sort_values('date').reset_index(drop=True)
expenses.value -= expenses.groupby('name').value.shift(1).fillna(0)


detailed_revenues =  dfs["Detailed_Revenues"].reset_index()
detailed_revenues = detailed_revenues.rename(columns=dict(zip(detailed_revenues.columns, ["name", "value", "parent_type", "date"])))
detailed_revenues.parent_type = detailed_revenues.parent_type.factorize()[0]
detailed_revenues.date = detailed_revenues.date.apply(lambda x: date(2023, x, 1))
detailed_revenues = detailed_revenues.sort_values('date').reset_index(drop=True)
detailed_revenues.value -= detailed_revenues.groupby('name').value.shift(1).fillna(0)
detailed_revenues = { i: detailed_revenues.loc[detailed_revenues.loc[:, "parent_type"] == j]
                     for j,i in enumerate(revenue.__members__.values())}

for i, j in detailed_revenues.items():
    j.parent_type = i


oils, others, _ = detailed_revenues.values()

oils_type = pd.Index(oil.__members__.values())
others_type = pd.Index(other_revenues.__members__.values())

oils.loc[:, "type"] = oils_type.take(oils.name.factorize()[0]).to_numpy()
others.loc[:, "type"] = others_type.take(others.name.factorize()[0]).to_numpy()


out = {}
out["category"] = list(map(lambda x: x[1].to_dict(), CategoryFrame.iterrows()))
out["revenue"] = list(map(lambda x: x[1].to_dict(), revenues.iterrows()))
out["expense"] = list(map(lambda x: x[1].to_dict(), expenses.iterrows()))
out["oil"] = list(map(lambda x: x[1].to_dict(), oils.iterrows()))
out["other_revenues"] = list(map(lambda x: x[1].to_dict(), others.iterrows()))

with open("data.json", "w") as f:
    json.dump(out, f, cls=JSONEncoder)

expenses

def dict_of_list(d):
    return {k: list(v.values()) for k,v in d.items()}

def df2dict(df):
    return dict(map(lambda x: (x[0], x[1].drop(columns="ID").reset_index().iloc[:,1:].to_dict()), list(df.groupby("ID"))))

def merge_dicts(list_of_dicts):
    out = {}
  for d in list_of_dicts:
      for k, v in d.items():
          if out.get(k) is None:
              out[k] = [v]
      else:
          out[k] += [v]
  return out

def dfs2data(dfs):
    return {month: {k:v[0] for k,v in merge_dicts(values).items()} for month, values
            in merge_dicts([{month : {sectionName : dict_of_list(sectionData)}
                             for month, sectionData in df2dict(df).items()}
                            for sectionName, df in dfs.items()]).items()}

out = dfs2data(dfs)

import json
with open("data.json", "w") as f:
    json.dump(out, f)
